import numpy as np
import matplotlib.pyplot as plt

def f(x):
    return np.sin(np.pi * (1 + x))

def lagrange_interpolation(x, x_nodes, y_nodes):
    n = len(x_nodes)
    result = 0.0
    for i in range(n):
        term = y_nodes[i]
        for j in range(n):
            if i != j:
                term *= (x - x_nodes[j]) / (x_nodes[i] - x_nodes[j])
        result += term
    return result

def newton_interpolation(x, x_nodes, y_nodes):
    n = len(x_nodes)
    coef = np.copy(y_nodes).astype(float)
    for j in range(1, n):
        for i in range(n-1, j-1, -1):
            coef[i] = (coef[i] - coef[i-1]) / (x_nodes[i] - x_nodes[i-j])
    result = coef[n-1]
    for i in range(n-2, -1, -1):
        result = result * (x - x_nodes[i]) + coef[i]
    return result

# Параметры
n_max = 20  # Максимальная степень полинома
n_points = 10000  # Количество точек для оценки ошибки
x_eval = np.linspace(-1, 1, n_points)
y_true = f(x_eval)

# Списки для хранения ошибок
errors_lagrange = []
errors_newton = []

# Построение графиков для выбранных n
selected_n = [2, 4, 6, 8, 10, 15, 20]
plt.figure(figsize=(12, 8))

for n in selected_n:
    x_nodes = np.linspace(-1, 1, n + 1)
    y_nodes = f(x_nodes)
    
    y_lagrange = np.array([lagrange_interpolation(x, x_nodes, y_nodes) for x in x_eval])
    y_newton = np.array([newton_interpolation(x, x_nodes, y_nodes) for x in x_eval])
    
    plt.plot(x_eval, y_lagrange, '--', linewidth=1, label=f'Лагранж n={n}')
    plt.plot(x_eval, y_newton, '-.', linewidth=1, label=f'Ньютон n={n}')

# Истинная функция
plt.plot(x_eval, y_true, 'k-', linewidth=2, label='f(x) = sin(π(1+x))')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Сравнение интерполяционных полиномов и исходной функции')
plt.legend()
plt.grid(True)
plt.show()

# Вычисление ошибок для всех n от 1 до n_max
for n in range(1, n_max + 1):
    x_nodes = np.linspace(-1, 1, n + 1)
    y_nodes = f(x_nodes)
    
    y_lagrange = np.array([lagrange_interpolation(x, x_nodes, y_nodes) for x in x_eval])
    y_newton = np.array([newton_interpolation(x, x_nodes, y_nodes) for x in x_eval])
    
    error_lagrange = np.max(np.abs(y_lagrange - y_true))
    error_newton = np.max(np.abs(y_newton - y_true))
    
    errors_lagrange.append(error_lagrange)
    errors_newton.append(error_newton)

# График ошибок
plt.figure(figsize=(10, 6))
plt.semilogy(range(1, n_max + 1), errors_lagrange, 'o-', label='Ошибка Лагранжа')
plt.semilogy(range(1, n_max + 1), errors_newton, 's-', label='Ошибка Ньютона')
plt.xlabel('Степень полинома n')
plt.ylabel('Максимальная ошибка')
plt.title('Зависимость ошибки интерполяции от степени полинома')
plt.legend()
plt.grid(True)
plt.show()
