import numpy as np
import matplotlib.pyplot as plt

def chebyshev_polynomial(n, x):
    """Вычисляет значение многочлена Чебышева степени n в точке x"""
    if n == 0:
        return np.ones_like(x)
    elif n == 1:
        return x
    else:
        T_prev = np.ones_like(x)  # T0
        T_curr = x                # T1
        for k in range(2, n + 1):
            T_next = 2 * x * T_curr - T_prev
            T_prev, T_curr = T_curr, T_next
        return T_curr

def chebyshev_roots(n):
    """Вычисляет корни многочлена Чебышева степени n на отрезке [-1, 1]"""
    k = np.arange(1, n + 1)
    roots = np.cos((2 * k - 1) * np.pi / (2 * n))
    return roots

def f(x):
    """Исходная функция"""
    return np.sin(np.pi * (1 + x))

def chebyshev_interpolation_coeffs(n):
    """Вычисляет коэффициенты интерполяционного многочлена"""
    # Узлы интерполяции - корни многочлена Чебышева
    nodes = chebyshev_roots(n)
    
    # Значения функции в узлах
    f_values = f(nodes)
    
    # Матрица системы уравнений
    A = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            A[i, j] = chebyshev_polynomial(j, nodes[i])
    
    # Решение системы для нахождения коэффициентов
    coeffs = np.linalg.solve(A, f_values)
    return coeffs, nodes

def evaluate_interpolation(x, coeffs):
    """Вычисляет значение интерполяционного многочлена в точке x"""
    result = np.zeros_like(x)
    for j, c in enumerate(coeffs):
        result += c * chebyshev_polynomial(j, x)
    return result

# Параметры интерполяции
n = 10  # степень интерполяционного многочлена

# Вычисляем коэффициенты
coeffs, nodes = chebyshev_interpolation_coeffs(n)

print("Коэффициенты интерполяционного многочлена:")
for i, c in enumerate(coeffs):
    print(f"c_{i} = {c:.6f}")

print(f"\nУзлы интерполяции (корни многочлена Чебышева степени {n}):")
print(nodes)

# Визуализация
x_fine = np.linspace(-1, 1, 1000)
y_exact = f(x_fine)
y_interp = evaluate_interpolation(x_fine, coeffs)

plt.figure(figsize=(12, 8))

# График функции и интерполяции
plt.subplot(2, 1, 1)
plt.plot(x_fine, y_exact, 'b-', label='Исходная функция f(x)')
plt.plot(x_fine, y_interp, 'r--', label='Интерполяция Чебышева')
plt.plot(nodes, f(nodes), 'ro', markersize=6, label='Узлы интерполяции')
plt.grid(True, alpha=0.3)
plt.legend()
plt.title(f'Интерполяция функции $f(x) = \\sin(\\pi(1+x))$ многочленами Чебышева степени {n-1}')
plt.xlabel('x')
plt.ylabel('f(x)')

# График ошибки
plt.subplot(2, 1, 2)
error = np.abs(y_exact - y_interp)
plt.semilogy(x_fine, error, 'g-', label='Ошибка интерполяции')
plt.grid(True, alpha=0.3)
plt.legend()
plt.title('Ошибка интерполяции')
plt.xlabel('x')
plt.ylabel('|f(x) - P(x)|')

plt.tight_layout()
plt.show()

# Анализ точности
max_error = np.max(error)
print(f"\nМаксимальная ошибка интерполяции: {max_error:.2e}")

# Проверка в узлах интерполяции
y_nodes_exact = f(nodes)
y_nodes_interp = evaluate_interpolation(nodes, coeffs)
nodes_error = np.abs(y_nodes_exact - y_nodes_interp)
print(f"Ошибка в узлах интерполяции (макс): {np.max(nodes_error):.2e}")
